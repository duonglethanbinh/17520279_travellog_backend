!function(e){var t={};function s(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,a){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(s.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(a,n,function(t){return e[t]}.bind(null,n));return a},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=3)}([function(e,t){e.exports=require("express")},function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("cors")},function(e,t,s){const a=s(4),n=s(5),o=process.env.PORT||4e3;a.createServer(n).listen(o)},function(e,t){e.exports=require("http")},function(e,t,s){const a=s(0),n=s(6),o=a(),i=s(1),r=s(2);s(7);const l=s(8),c=s(9);o.use(n.urlencoded({extended:!0})),o.use(n.json()),o.use(r());const p=s(10),d=s(12),m=s(14),u=s(16);o.use("/api-docs",l.serve,l.setup(c)),o.use("/uploads",a.static("uploads")),o.use("/places",p),o.use("/blogs",m),o.use("/contacts",d),o.use("/users",u),i.connect(process.env.DB_CONNECTION_2_2_12,{useNewUrlParser:!0,useUnifiedTopology:!0}).then(()=>console.log("MongoDB Connected!")).catch(e=>{console.log(e)}),o.get("/",(function(e,t){t.send("We are at server")})),e.exports=o},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("dotenv/config")},function(e,t){e.exports=require("swagger-ui-express")},function(e){e.exports=JSON.parse('{"swagger":"2.0","info":{"description":"This is a API Docs written by json. This is Docs for Assigment 7","version":"1.0.0","title":"Travellog API","contact":{"email":"17520279@gm.uit.edu.vn","name":"Duong Le Thanh Binh"},"servers":["http://localhost:4000"]},"paths":{"/":{"get":{"tags":["/"],"summary":"Get response from main page","description":"Get response from main page","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"We are at server"}}}},"/blogs":{"get":{"tags":["/blogs"],"summary":"Get response data from blogs page","description":"Get response data from blogs page. Include: <br/><ul><li>_id</li><li>name</li><li>title</li><li>content</li><li>created</li><li>__v</li></ul>","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get all json data"}}},"post":{"tags":["/blogs"],"parameters":[{"name":"blogs","in":"body","description":"blogs that we want to create","schema":{"$ref":"#/definitions/blogs"}}],"summary":"Post to mongodb atlas, the get response.","description":"Post to mongodb atlas, the get response.<br/>In other word, add new blog<br/> Example for \'name\' must be: <br/><ul><li>Ha Noi</li><li>Ho Chi Minh</li><li>Hue</li><li>Da Nang</li><li>Phong Nha</li><li>Sapa</li><li>Ben Tre</li></ul>","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get back json data"}}}},"/blogs/{blogsID}/data":{"get":{"tags":["/blogs"],"parameters":[{"name":"blogsID","in":"path","description":"ID of blogs that needs to be search. Example: <ul><li>5ec236084152380017ed5914</li><li>5eb68c02f92daf001749af6c</li><li>5eb688ef044d2a3f109ae89e</li></ul>","required":true,"type":"string"}],"summary":"Search single document by ID from blogs page","description":"Get response from search ID blogs page<br/> Include: <br/><ul><li>_id</li><li>name</li><li>title</li><li>content</li><li>created</li><li>__v</li></ul>","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get single search json data"}}}},"/blogs/{blogsID}":{"get":{"tags":["/blogs"],"parameters":[{"name":"blogsID","in":"path","description":"Name of blogs that needs to be search. Example: <ul><li>Ha Noi</li><li>Ho Chi Minh</li><li>Hue</li><li>Da Nang</li><li>Phong Nha</li><li>Sapa</li><li>Ben Tre</li></ul>","required":true,"type":"string"}],"summary":"Search by name of place from blogs page","description":"Get response from search blogs page<br/> Include: <br/><ul><li>_id</li><li>name</li><li>title</li><li>content</li><li>created</li><li>__v</li></ul>","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get single search json data"}}},"patch":{"tags":["/blogs"],"parameters":[{"name":"blogsID","in":"path","description":"ID of blog that needs to be update. Example: <ul><li>5ec236084152380017ed5914</li><li>5eb68c02f92daf001749af6c</li><li>5eb688ef044d2a3f109ae89e</li></ul>","required":true,"type":"string"},{"name":"Content update","in":"body","description":"Type your update content in here","schema":{"$ref":"#/definitions/blogs"}}],"summary":"Update single document by ID of this blog","description":"Patch data to update, then get json data response: { message: \'blog updated\' } ","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get update message { message: \'blog updated\' } "}}},"delete":{"tags":["/blogs"],"parameters":[{"name":"blogsID","in":"path","description":"ID of blog that needs to delete. Example: <ul><li>5ec236084152380017ed5914</li><li>5eb68c02f92daf001749af6c</li><li>5eb688ef044d2a3f109ae89e</li></ul>","required":true,"type":"string"}],"summary":"Delete single document by ID of this blog","description":"Delete data to update, then get json data response: { message: \'blog deleted\' }","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get delete message { message: \'blog deleted\' }"}}}},"/places":{"get":{"tags":["/places"],"summary":"Get response from places page","description":"Get response from places page. Include: <br/><ul><li>_id</li><li>name</li><li>image</li><li>__v</li></ul>","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get all json data"}}},"post":{"tags":["/places"],"parameters":[{"name":"places","in":"body","description":"Place that we want to create. Example: <br/><ul><li>\'name\': Ben Tre 2</li><li>\'image\': https://travellog-6th-backend.herokuapp.com/uploads/bentre2.jpg</li></ul>","schema":{"$ref":"#/definitions/places"}}],"summary":"Post to mongodb atlas, then get data response.","description":"Post to mongodb atlas, then get data response. Include: <br/><ul><li>_id</li><li>name</li><li>image</li><li>__v</li></ul>","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get back json data"}}}},"/places/{placesID}/data":{"get":{"tags":["/places"],"parameters":[{"name":"placesID","in":"path","description":"ID of places that needs to be search. Example: <ul><li>5eb0bf146975b31034797484</li><li>5eb0c0066975b31034797485</li><li>5eb0c0446975b31034797486</li></ul>","required":true,"type":"string"}],"summary":"Search single document by ID from places page","description":"Get response from search ID place page<br/> Include: <br/><ul><li>_id</li><li>name</li><li>image</li><li>__v</li></ul>","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get single search json data"}}}},"/places/{placesID}":{"patch":{"tags":["/places"],"parameters":[{"name":"placesID","in":"path","description":"ID of place that needs to be update. Example: <ul><li>5eb0bf146975b31034797484</li><li>5eb0c0066975b31034797485</li><li>5eb0c0446975b31034797486</li></ul>","required":true,"type":"string"},{"name":"Content update","in":"body","description":"Type your update content in here","schema":{"$ref":"#/definitions/places"}}],"summary":"Update single document by ID of this place","description":"Patch data to update, then get json data response: { message: \'place updated\' }","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get update message { message: \'place updated\' } "}}},"delete":{"tags":["/places"],"parameters":[{"name":"placesID","in":"path","description":"ID of places that needs to delete. Example: <ul><li>5eb0bf146975b31034797484</li><li>5eb0c0066975b31034797485</li><li>5eb0c0446975b31034797486</li></ul>","required":true,"type":"string"}],"summary":"Delete single document by ID of this place","description":"Delete data to update, then get json data response: { message: \'place deleted\' }","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get delete message { message: \'place deleted\' }"}}}},"/contacts":{"get":{"tags":["/contacts"],"summary":"Get response data from contacts page","description":"Get response data from contacts page.<br/>Include: <br/><ul><li>_id</li><li>name</li><li>email</li><li>message</li><li>__v</li></ul>","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get all json data"}}},"post":{"tags":["/contacts"],"parameters":[{"name":"contacts","in":"body","description":"Add new contact","schema":{"$ref":"#/definitions/contacts"}}],"summary":"Post to mongodb atlas, then get data response.","description":"Post to mongodb atlas, then get data response. <br/>In other word, add new contact","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":"Get back json data"}}}}},"definitions":{"places":{"required":["name","image"],"properties":{"name":{"type":"string"},"image":{"type":"string"}}},"blogs":{"required":["name","title","content","created"],"properties":{"name":{"type":"string"},"title":{"type":"string"},"content":{"type":"string"},"created":{"type":"string","format":"date-time"}}},"contacts":{"required":["name","email","message"],"properties":{"name":{"type":"string"},"email":{"type":"string"},"message":{"type":"string"}}}}}')},function(e,t,s){const a=s(0).Router(),n=s(11);a.get("/",async(e,t)=>{try{const e=await n.find();t.json(e)}catch(e){t.json({message:e})}}),a.get("/:searchId/data",(e,t,s)=>{const a=e.params.searchId;console.log(a),n.findById(a).exec().then(e=>{t.status(200).json(e)}).catch(e=>t.json({message:e}))}),a.post("/",async(e,t)=>{const s=new n({name:e.body.name,image:e.body.image});try{const e=await s.save();t.json(e)}catch(e){t.json({message:e})}}),a.patch("/:updateid",async(e,t)=>{try{await n.updateOne({_id:e.params.updateid},{$set:{name:e.body.name,image:e.body.image}}),t.json({message:"place updated"})}catch(e){t.json({message:e})}}),a.delete("/:deleteid",async(e,t)=>{try{await n.deleteOne({_id:e.params.deleteid}),t.json({message:"place deleted"})}catch(e){t.json({message:e})}}),e.exports=a},function(e,t,s){const a=s(1),n=a.Schema({name:String,image:String});e.exports=a.model("places",n)},function(e,t,s){const a=s(0).Router(),n=s(13);a.get("/",async(e,t)=>{try{const e=await n.find();t.json(e)}catch(e){t.json({message:e})}}),a.post("/",async(e,t)=>{const s=new n({name:e.body.name,email:e.body.email,message:e.body.message});try{const e=await s.save();t.json(e)}catch(e){t.json({message:e})}}),a.patch("/:updateid",async(e,t)=>{try{const s=await n.updateOne({_id:e.params.updateid},{$set:{name:e.body.name,email:e.body.email,message:e.body.message}});t.json(s)}catch(e){t.json({message:e})}}),e.exports=a},function(e,t,s){const a=s(1),n=a.Schema({name:String,email:String,message:String});e.exports=a.model("contacts",n)},function(e,t,s){const a=s(0).Router(),n=s(15);a.get("/",async(e,t)=>{try{const e=await n.find().sort({created:-1});t.json(e)}catch(e){t.json({message:e})}}),a.get("/:blogsId",(e,t)=>{const s=e.params.blogsId;console.log(s),n.find({$or:[{name:s}]}).sort({created:-1}).exec().then(e=>{e.length>0?(console.log(e.length),t.status(200).json(e)):t.json({message:"Not found"})}).catch(e=>t.json({message:e}))}),a.get("/:searchId/data",(e,t,s)=>{const a=e.params.searchId;console.log(a),n.findById(a).exec().then(e=>{t.status(200).json(e)}).catch(e=>t.json({message:e}))}),a.post("/",async(e,t)=>{const s=new n({name:e.body.name,title:e.body.title,content:e.body.content});try{const e=await s.save();t.json(e)}catch(e){t.json({message:e})}}),a.patch("/:updateid",async(e,t)=>{try{await n.updateOne({_id:e.params.updateid},{$set:{name:e.body.name,title:e.body.title,content:e.body.content,created:e.body.created}}),t.json({message:"blog updated"})}catch(e){t.json({message:e})}}),a.delete("/:deleteid",async(e,t)=>{try{console.log(e.params),await n.deleteOne({_id:e.params.deleteid}),t.json({message:"blog deleted"})}catch(e){t.json({message:e})}}),e.exports=a},function(e,t,s){const a=s(1),n=a.Schema({name:String,title:String,content:String,created:{type:Date,default:Date.now}});e.exports=a.model("blogs",n)},function(e,t,s){const a=s(0).Router(),n=s(2),o=s(17),i=s(18),r=s(19);a.use(n()),process.env.SECRET_KEY="secret",a.post("/register",(e,t)=>{const s=new Date,a={first_name:e.body.first_name,last_name:e.body.last_name,email:e.body.email,password:e.body.password,created:s};r.findOne({email:e.body.email}).then(s=>{s?t.json({error:"User already exists"}):i.hash(e.body.password,10,(e,s)=>{a.password=s,r.create(a).then(e=>{t.json({status:e.email+" registered!"})}).catch(e=>{t.send("error: "+e)})})}).catch(e=>{t.send("error: "+e)})}),a.post("/login",(e,t)=>{r.findOne({email:e.body.email}).then(s=>{if(s)if(i.compareSync(e.body.password,s.password)){const e={_id:s._id,first_name:s.first_name,last_name:s.last_name,email:s.email},a=o.sign(e,process.env.SECRET_KEY,{expiresIn:1440});t.send(a)}else t.json({error:"Wrong password"});else t.json({error:"User does not exist"})}).catch(e=>{t.send("error: "+e)})}),e.exports=a},function(e,t){e.exports=require("jsonwebtoken")},function(e,t){e.exports=require("bcrypt")},function(e,t,s){const a=s(1),n=new(0,a.Schema)({first_name:{type:String},last_name:{type:String},email:{type:String,required:!0},password:{type:String,required:!0},date:{type:Date,default:Date.now}});e.exports=User=a.model("users",n)}]);